@page "/orderbook"
@using Rcwowbagger.BlazorBook.Models.Orderbooks
@implements IDisposable

<h3>Order Book</h3>

<div class="orderbook">
    <div class="asks">
        <h4>Asks</h4>
        <table>
            <thead>
                <tr>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Volume</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ask in Asks)
                {
                    <tr>
                        <td>@ask.Price</td>
                        <td>@ask.Quantity</td>
                        <td>
                            <div class="volume-bar" style="width: @(CalculateVolumeWidth(ask.Quantity))%; background-color: #ff6666;">
                                @ask.Quantity
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="bids">
        <h4>Bids</h4>
        <table>
            <thead>
                <tr>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Volume</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var bid in Bids)
                {
                    <tr>
                        <td>@bid.Price</td>
                        <td>@bid.Quantity</td>
                        <td>
                            <div class="volume-bar" style="width: @(CalculateVolumeWidth(bid.Quantity))%; background-color: #66ff66;">
                                @bid.Quantity
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Order> Asks { get; set; } = new();
    private List<Order> Bids { get; set; } = new();
    private Timer? _timer;
    private decimal MaxVolume { get; set; }

    protected override void OnInitialized()
    {
        InitializeOrderBook();
        UpdateMaxVolume();

        _timer = new Timer(UpdateOrderBook, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void InitializeOrderBook()
    {
        Asks = new List<Order>
        {
            new Order { Price = 100.5m, Quantity = 5 },
            new Order { Price = 101m, Quantity = 3 },
            new Order { Price = 101.5m, Quantity = 2 }
        };

        Bids = new List<Order>
        {
            new Order { Price = 100m, Quantity = 4 },
            new Order { Price = 99.5m, Quantity = 6 },
            new Order { Price = 99m, Quantity = 8 }
        };
    }

    private void UpdateOrderBook(object? state)
    {
        Random rnd = new Random();
        foreach (var ask in Asks)
        {
            ask.Quantity += rnd.Next(-1, 2);
        }
        foreach (var bid in Bids)
        {
            bid.Quantity += rnd.Next(-1, 2);
        }

        UpdateMaxVolume();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateMaxVolume()
    {
        MaxVolume = Math.Max(Asks.Max(a => a.Quantity), Bids.Max(b => b.Quantity));
    }

    private decimal CalculateVolumeWidth(decimal quantity)
    {
        if (MaxVolume == 0) return 0;
        return quantity / MaxVolume * 100m;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
