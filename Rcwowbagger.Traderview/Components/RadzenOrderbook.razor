@page "/radzen_orderbook"
@rendermode InteractiveServer
@implements IDisposable

<RadzenStack Orientation="Orientation.Horizontal" Gap="20px">
    <!-- Bids Side -->
    <div class="orderbook-side">
        <h4>Bids</h4>
        <RadzenDataGrid Data="@Bids" TItem="Order" AllowSorting="false" AllowPaging="false">
            <Columns>
                <RadzenDataGridColumn TItem="Order" Property="Price" Title="Price" />
                <RadzenDataGridColumn TItem="Order" Property="Quantity" Title="Quantity" />
                <RadzenDataGridColumn TItem="Order" Title="Volume">
                    <Template Context="order">
                        <ResizableBar BackgroundColor="#ff6666" BarColor="#ffeeee" @bind-value=@(order.VolumePercent) IsReversed="true" />
                        @* <RadzenProgressBar @bind-Value="order.VolumePercent" Style="background-color: #66ff66;" Max="100" ShowValue="false" /> *@
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

    <!-- Asks Side -->
    <div class="orderbook-side">
        <h4>Asks</h4>
        <RadzenDataGrid Data="@Asks" TItem="Order" AllowSorting="false" AllowPaging="false">
            <Columns>
                <RadzenDataGridColumn TItem="Order" Title="Volume">
                    <Template Context="order">
                        <ResizableBar BackgroundColor="#ffeeee" BarColor="#ff6666" @bind-value=@(order.VolumePercent) IsReversed="false " />
                        @* <RadzenProgressBar @bind-Value="order.VolumePercent" Style="background-color: #ffffff; " Max="100" ProgressBarStyle="ProgressBarStyle.Base" ShowValue="false" /> *@
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Order" Property="Quantity" Title="Quantity" />
                <RadzenDataGridColumn TItem="Order" Property="Price" Title="Price" />
            </Columns>
        </RadzenDataGrid>
    </div>


</RadzenStack>

@code {
    private List<Order> Asks { get; set; } = new();
    private List<Order> Bids { get; set; } = new();
    private Timer? _timer;
    private decimal MaxVolume { get; set; }

    protected override void OnInitialized()
    {
        InitializeOrderBook();
        UpdateMaxVolume();
        _timer = new Timer(UpdateOrderBook, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void InitializeOrderBook()
    {
        Asks = new List<Order>
        {
            new Order { Price = 101.5m, Quantity = 3, Side = Side.Sell},
            new Order { Price = 102m, Quantity = 5, Side = Side.Sell },
            new Order { Price = 102.5m, Quantity = 7, Side = Side.Sell }
        };

        Bids = new List<Order>
        {
            new Order { Price = 100.5m, Quantity = 4, Side = Side.Buy },
            new Order { Price = 100m, Quantity = 6, Side = Side.Buy },
            new Order { Price = 99.5m, Quantity = 8, Side = Side.Buy }
        };

        UpdateMaxVolume();
    }

    private void UpdateOrderBook(object? state)
    {
        Random rnd = new Random();
        foreach (var ask in Asks)
        {
            ask.Quantity = Math.Max(1, ask.Quantity + rnd.Next(-1, 2));
        }
        foreach (var bid in Bids)
        {
            bid.Quantity = Math.Max(1, bid.Quantity + rnd.Next(-1, 2));
        }

        UpdateMaxVolume();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateMaxVolume()
    {
        MaxVolume = Math.Max(Asks.Max(a => a.Quantity), Bids.Max(b => b.Quantity));
        Asks.ForEach(a => a.VolumePercent = Convert.ToDouble(a.Quantity / MaxVolume * 100));
        Bids.ForEach(b => b.VolumePercent = Convert.ToDouble(b.Quantity / MaxVolume * 100));
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private class Order
    {
        public Side Side { get; set; }
        public decimal Price { get; set; }
        public decimal Quantity { get; set; }
        private double _volPercent = 0;
        public double VolumePercent
        {
            get
            {
                return Side == Side.Sell
                ? _volPercent
                : 100 - _volPercent;
            }   
            set
            {
                _volPercent = value;
            }
        }
    }

    private enum Side
    {
        Buy,
        Sell
    }

}


